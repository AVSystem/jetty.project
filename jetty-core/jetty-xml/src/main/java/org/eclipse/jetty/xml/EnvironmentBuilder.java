//
// ========================================================================
// Copyright (c) 1995-2022 Mort Bay Consulting Pty Ltd and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
// ========================================================================
//

package org.eclipse.jetty.xml;

import java.io.IOException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.jetty.util.Attributes;
import org.eclipse.jetty.util.StringUtil;
import org.eclipse.jetty.util.annotation.Name;
import org.eclipse.jetty.util.component.Environment;
import org.eclipse.jetty.util.resource.Resource;

/**
 * A Builder of {@link Environment}s intended to be used in XML
 * files generated by <code>start.jar</code>.
 * <pre&gt;
 * &lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
 *   &lt;New class="org.eclipse.jetty.xml.EnvironmentBuilder"&gt;
 *     &lt;Arg name="name"&gt;ee10&lt;/Arg&gt;
 *     &lt;Call name="putId"&gt;
 *       &lt;Arg&gt;Server&lt;/Arg&gt;
 *       &lt;Arg&gt;&lt;Ref id="Server"/&gt;&lt;/Arg&gt;
 *     &lt;/Call&gt;
 *     &lt;Put name="propertyA"&gt;valueA&lt;/Put&gt;
 *     &lt;Put name="propertyB"&gt;valueB&lt;/Put&gt;
 *     &lt;Put name="propertyC"&gt;valueC&lt;/Put&gt;
 *
 *     &lt;Call name="addClassPath"&gt;
 *       &lt;Arg&gt;
 *         &lt;Array type="String"&gt;
 *           &lt;Item&gt;lib/feature/foo.jar&lt;/Item&gt;
 *           &lt;Item&gt;lib/feature/bar.jar&lt;/Item&gt;
 *         &lt;/Array&gt;
 *       &lt;/Arg&gt;
 *     &lt;/Call&gt;
 *
 *     &lt;Call name="addXml"&gt;
 *       &lt;Arg&gt;
 *         &lt;Array type="String"&gt;
 *           &lt;Item&gt;etc/foo.xml&lt;/Item&gt;
 *           &lt;Item&gt;etc/bar.jar&lt;/Item&gt;
 *         &lt;/Array&gt;
 *       &lt;/Arg&gt;
 *     &lt;/Call&gt;
 *
 *     &lt;Call id="EnvironmentEE10" name="build"/&gt;
 *   &lt;/New&gt;
 *   &lt;Call name="addEnvironment"&gt;
 *     &lt;Arg&gt;&lt;Ref id="EnvironmentEE10"/&gt;&lt;/Arg&gt;
 *   &lt;/Call&gt;
 * &lt;/Configure&gt;
 * </pre>
 *
 */
public class EnvironmentBuilder extends AbstractMap<String, String>
{
    private final String _name;
    private final String _environmentId;
    private final Map<String, String> _properties = new HashMap<>();
    private final List<Resource> _xmls = new ArrayList<>();
    private final List<URL> _classpath = new ArrayList<>();
    private final Map<String, Object> _idMap = new HashMap<>();

    public EnvironmentBuilder(@Name("name") String name)
    {
        this(name, null);
    }

    public EnvironmentBuilder(@Name("name") String name,
                              @Name("envId") String envId)
    {
        System.getProperties().keySet().stream()
            .map(String::valueOf)
            .forEach(k -> _properties.put(k, System.getProperty(k)));
        _name = name;
        _environmentId = StringUtil.isBlank(envId) ? "Environment" : envId;
    }

    @Override
    public Set<Entry<String, String>> entrySet()
    {
        return _properties.entrySet();
    }

    @Override
    public String put(String property, String value)
    {
        return _properties.put(property, value);
    }

    public void putId(String id, Object value)
    {
        _idMap.put(id, value);
    }

    public void addXml(String... xmls)
    {
        try
        {
            for (String xml : xmls)
                _xmls.add(Resource.newResource(xml));
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public void addClassPath(String... classPaths)
    {
        for (String classPath : classPaths)
        {
            try (Resource resource = Resource.newResource(classPath))
            {
                _classpath.add(resource.getURI().toURL());
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
    }

    public Environment build() throws Exception
    {
        if (StringUtil.isBlank(_name))
            throw new IllegalStateException("Name not set");

        Environment environment = new BuiltEnvironment(_name, _classpath);
        _idMap.put(_environmentId, environment);

        ClassLoader old = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(environment.getClassLoader());
        try
        {
            // For all arguments, parse XMLs
            XmlConfiguration last = null;
            for (Resource xml : _xmls)
            {
                XmlConfiguration configuration = new XmlConfiguration(xml);
                configuration.getIdMap().putAll(last == null ? _idMap : last.getIdMap());
                configuration.getProperties().putAll(_properties);
                configuration.configure();
                last = configuration;
            }
        }
        finally
        {
            Thread.currentThread().setContextClassLoader(old);
        }

        return environment;
    }

    private static class BuiltEnvironment extends Attributes.Mapped implements Environment
    {
        private final String _name;
        private final URLClassLoader _classLoader;

        public BuiltEnvironment(String name, List<URL> classpath)
        {
            _name = name;
            _classLoader = new URLClassLoader(classpath.toArray(new URL[0]));
        }

        @Override
        public String getName()
        {
            return _name;
        }

        @Override
        public ClassLoader getClassLoader()
        {
            return _classLoader;
        }
    }
}
